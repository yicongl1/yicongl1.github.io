<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程心得 on My New Hugo Site</title>
    <link>http://localhost:1313/code/index.html</link>
    <description>Recent content in 编程心得 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【网站搭建】hugo配置</title>
      <link>http://localhost:1313/code/webbuild1/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/code/webbuild1/index.html</guid>
      <description>使用hugo搭建网站 前期准备 1）安装go语言 从All releases - The Go Programming Language下载.msi安装包，并安装到选定目录下。
在终端输入go version以验证安装成功。
2）安装hugo 在Releases · gohugoio/hugo下载hugo，然后讲hugo.exe所在目录添加至系统环境变量Path下。
在终端输入hugo version验证。
网站部署 1）创建一个新网站 hugo new site page-name
2）配置主题 在Hugo Themes里挑选喜欢的主题，并输入以下代码配置：
cd page-namegit initgit submodule add web-URL-or-ssh-key themes/theme-name使用 Visual Studio Code 打开网站所在目录，在网站配置文件config.toml中输入：
theme = &amp;quot;theme-name&amp;quot;
3）添加内容 输入代码添加内容：
hugo new posts/post-name.md
关于Markdown语言的语法可以在Markdown 官方教程中查看: markdown官网
成果查看 输入代码启动Hugo服务器：hugo server -D
我们可以在http://localhost:1313/.查看创建我网页。
此时，我们仍可以对网站进行修改，所作的修改将同步呈现在网页中。
输入hugo -D生成静态网页，网站的支持文件将输出在./public/目录下。
同步到Github远程库 1）在Github上建立远程库 在Github上新建仓库 username.github.io，username 即 Github 用户名。
2）从本地上传到远程库 转到public目录，提交内容到缓冲区，连接远程库后推送至master分支。
cd publicgit initgit add .</description>
    </item>
    <item>
      <title>【网站搭建】短代码、面包屑</title>
      <link>http://localhost:1313/code/webbuild2/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/code/webbuild2/index.html</guid>
      <description>短代码“shortcode” 视频插入 https://stack.jimmycai.com/writing/shortcodes
Bilibili 视频av号或BV号错误！请检查视频av号或BV号是否正确
当前视频av或BV号：VIDEO_ID，视频分P：PART_NUMBER
icon插入 iconify 在assets/plugins文件夹下插入iconify/iconify.icon.min.js文件 在主config.toml下插入代码
[[params.plugins.js]]link = &amp;#34;plugins/iconify/iconify-icon.min.js&amp;#34;然后在文件中可以使用短代码轻松使用iconify，样例如下：
&amp;lt;iconify-icon icon=&amp;#34;simple-icons:bilibili&amp;#34;&amp;gt;&amp;lt;/iconify-icon&amp;gt;icons8 待写，暂时没有理解如何做到的，以下是样例：
[[params.social]]icon = &amp;#34;lab la-github&amp;#34; # https://icons8.com/line-awesomeurl = &amp;#34;https://github.com/podcast-of-engineers&amp;#34;# 写在config.toml里# 目前已知的似乎lab代表着icon的尺寸&amp;lt;li class=&amp;#34;list-inline-item&amp;#34;&amp;gt;&amp;lt;a href=&amp;#34;{{.link | safeURL}}&amp;#34;&amp;gt;&amp;lt;i class=&amp;#34;lab {{.icon}}&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; breadcrumb面包屑栏 hugo创建网页构成 https://gohugo.io/getting-started/directory-structure/
archetype 用于hugo new的模板
assets 需要使用Hugo Pipes程序的文件
config 个性化设置
content hugo new出来文件的默认位置 如果content的子文件夹里有_index.md则会被嵌入section tree中</description>
    </item>
    <item>
      <title>Git使用学习</title>
      <link>http://localhost:1313/code/git/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/code/git/index.html</guid>
      <description>本文参考资料
Git概述 Linus团队开发的一种分布式版本控制工具
所有电脑都有完整的版本库，以及一个共享版本库，不容易宕机
优势：备份/代码还原/协同开发/追溯问题代码的编写人和编写时间/无需中心服务器
下载地址：https://git-scm.com/download Git GUI: Git图形界面工具
Git Bash: Git命令行工具
Git基本配置 右键打开Git Bash 设置用户信息 git config --global user.name &amp;#34;Solal&amp;#34;git config --global user.email &amp;#34;solal2600@gmail.com&amp;#34; 查看用户信息 git config --global user.namegit config --global user.email 设置指令别名 #在终端里创建bashrc文件touch ~/.bashrc #用于输出git提交日志alias git-log=&amp;#39;git log --pretty=oneline --all --graph --abbrev-commit&amp;#39;#用于输出当前目录所有文件及基本信息alias ll=&amp;#39;ls -al&amp;#39;#运行bashrc文件source ~/.bashrc 解决GitBash乱码问题 #打开GitBash执行下面命令git config --global core.quotepath false#${git_home}/etc/bash.bashrc 文件最后加入下面两行export LANG=&amp;#34;zh_CN.UTF-8&amp;#34; export LC_ALL=&amp;#34;zh_CN.UTF-8&amp;#34;Git基本工作流程 git init（初始化） 初始化当前目录为一个本地git仓库</description>
    </item>
    <item>
      <title>无人机调试</title>
      <link>http://localhost:1313/code/drone/index.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/code/drone/index.html</guid>
      <description>一、前期准备 注意事项 以下所指的 地面站 ，可以理解为开发者个人电脑通过虚拟机所使用的Ubuntu系统。 以下所指的 Nano , 可以理解为Jetson Nano所使用的Ubuntu系统。 打开 终端 快捷键：Ctrl + Alt + T 连接局域网 开启路由器，将Nano和地面站都连入该路由器生成的局域网。
虚拟机网络设置 打开VMware，在虚拟机Ubuntu关机状态下，打开虚拟机设置-网络适配器-网络连接，选择 桥接模式 ，并勾选“复制网络连接状态”。 二、获取IP地址和设备名称 IP地址 在Nano上打开终端，输入ifconfig，获得IP地址 我们需要的是 wlan0-inet 假设得到IP地址为：198.168.1.2 ，以下简称 NanoIP
同样的，在地面站打开终端，输入ifconfig，获得IP地址 我们需要的是 ens33-inet 假设得到IP地址为：198.168.1.4 ，以下简称 地面站IP
设备名称 在终端中，介于“@”和“:”之间的绿色字体，即设备名称。 假设获得以下设备名称： “iaxlab-desktop” ,以下简称 Nano设备名 “solal-virtual-machine” ,以下简称 地面站设备名
三、配置Nano 修改bashrc文件 在Nano终端输入gedit ~/.bashrc，在bashrc文件最后一行添加：
export ROS_HOSTNAME=NanoIP export ROS_MASTER_URI=http://NanoIP:11311`以上面的NanoIP为例，这里就应该添加：
export ROS_HOSTNAME=198.168.1.2 export ROS_MASTER_URI=http://198.168.1.2:11311`保存bashrc文件，然后在终端输入source ~/.bashrc
修改hosts文件 在Nano终端输入sudo gedit /etc/hosts，在hosts文件中添加：
地面站IP 地面站设备名以上面的地面站IP和地面站设备名为例，这里就应该添加：
192.168.1.4 solal-virtual-machine保存hosts文件
四、配置地面站 修改bashrc文件 在地面站终端输入gedit ~/.</description>
    </item>
  </channel>
</rss>